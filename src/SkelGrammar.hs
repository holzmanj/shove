-- Haskell module generated by the BNF converter

module SkelGrammar where

import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x
transProg :: AbsGrammar.Prog -> Result
transProg x = case x of
  AbsGrammar.Program stmts -> failure x
transStmt :: AbsGrammar.Stmt -> Result
transStmt x = case x of
  AbsGrammar.SBind ident expr -> failure x
  AbsGrammar.SEval expr -> failure x
transExpr :: AbsGrammar.Expr -> Result
transExpr x = case x of
  AbsGrammar.EIdent ident -> failure x
  AbsGrammar.ELit lit -> failure x
  AbsGrammar.EDefer -> failure x
  AbsGrammar.EApply expr1 expr2 -> failure x
  AbsGrammar.EForce expr -> failure x
  AbsGrammar.EMul expr1 expr2 -> failure x
  AbsGrammar.EDiv expr1 expr2 -> failure x
  AbsGrammar.EMod expr1 expr2 -> failure x
  AbsGrammar.EAdd expr1 expr2 -> failure x
  AbsGrammar.ESub expr1 expr2 -> failure x
  AbsGrammar.ECons expr1 expr2 -> failure x
  AbsGrammar.ELess expr1 expr2 -> failure x
  AbsGrammar.EMore expr1 expr2 -> failure x
  AbsGrammar.ELessEq expr1 expr2 -> failure x
  AbsGrammar.EMoreEq expr1 expr2 -> failure x
  AbsGrammar.EEqual expr1 expr2 -> failure x
  AbsGrammar.ENEqual expr1 expr2 -> failure x
  AbsGrammar.EAnd expr1 expr2 -> failure x
  AbsGrammar.EOr expr1 expr2 -> failure x
  AbsGrammar.EShove expr1 expr2 -> failure x
  AbsGrammar.EIfThen expr1 expr2 expr3 -> failure x
  AbsGrammar.ELetIn binds expr -> failure x
transLit :: AbsGrammar.Lit -> Result
transLit x = case x of
  AbsGrammar.LInt integer -> failure x
  AbsGrammar.LDouble double -> failure x
  AbsGrammar.LChar char -> failure x
  AbsGrammar.LString string -> failure x
  AbsGrammar.LTrue -> failure x
  AbsGrammar.LFalse -> failure x
  AbsGrammar.LVoid -> failure x
  AbsGrammar.LList exprs -> failure x
  AbsGrammar.LLambda idents expr -> failure x
transBind :: AbsGrammar.Bind -> Result
transBind x = case x of
  AbsGrammar.Bind ident expr -> failure x

