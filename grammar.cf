comment "#" ;

Program.    Prog    ::= [Stmt] ;

separator Stmt "\n" ;
separator Stmt ";" ;
SBind.      Stmt    ::= "let" Ident "=" Expr ;
SEval.      Stmt    ::= Expr ;

separator Expr "," ;
EIdent.     Expr10  ::= Ident ;
ELit.       Expr10  ::= Lit ;
EDefer.     Expr10  ::= "~" ;
ERecurse.   Expr10  ::= "@" ;
EApply.     Expr9   ::= Expr9 Expr10 ;
EForce.     Expr8   ::= "!" Expr9 ;
EMul.       Expr7   ::= Expr7 "*" Expr8 ;
EDiv.       Expr7   ::= Expr7 "/" Expr8 ;
EMod.       Expr7   ::= Expr7 "%" Expr8 ;
EAdd.       Expr6   ::= Expr6 "+" Expr7 ;
ESub.       Expr6   ::= Expr6 "-" Expr7 ;
ECons.      Expr5   ::= Expr6 "::" Expr5 ;
ELess.      Expr4   ::= Expr5 "<" Expr5 ;
EMore.      Expr4   ::= Expr5 ">" Expr5 ;
ELessEq.    Expr4   ::= Expr5 "<=" Expr5 ;
EMoreEq.    Expr4   ::= Expr5 ">=" Expr5 ;
EEqual.     Expr4   ::= Expr5 "==" Expr5 ;
ENEqual.    Expr4   ::= Expr5 "!=" Expr5 ;
EAnd.       Expr3   ::= Expr4 "and" Expr3 ;
EOr.        Expr2   ::= Expr3 "or" Expr2 ;
EShove.     Expr1   ::= Expr1 "->" Expr2 ;
EIfThen.    Expr    ::= "if" Expr "then" Expr "else" Expr ;
ELetIn.     Expr    ::= "let" [Bind] "in" Expr ;
coercions Expr 11 ;

LInt.       Lit     ::= Integer ;
LDouble.    Lit     ::= Double ;
LChar.      Lit     ::= Char ;
LString.    Lit     ::= String ;
LTrue.      Lit     ::= "true" ;
LFalse.     Lit     ::= "false" ;
LVoid.      Lit     ::= "void" ;
LList.      Lit     ::= "[" [Expr] "]" ;
LLambda.    Lit     ::= "{" [Ident] Expr "}" ;

[].         [Ident] ::= ;
(:[]).      [Ident] ::= Ident "|" ;
(:).        [Ident] ::= Ident "," [Ident] ;

separator Bind "," ;
Bind.       Bind    ::= Ident "=" Expr ;